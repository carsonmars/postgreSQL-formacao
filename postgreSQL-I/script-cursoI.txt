CREATE TABLE aluno (
	id SERIAL,
	nome VARCHAR(255),
	cpf CHAR(11),
	observacao TEXT, 
	idade INTEGER,
	dinheiro NUMERIC (10,2),
	alteura REAL,
	ativo BOOLEAN,
	data_nascimento DATE,
	hora_aula TIME,
	matriculado_em TIMESTAMP
);

SELECT * FROM aluno;

INSERT INTO aluno (
	nome, 
	cpf, 
	observacao,
	idade,
	dinheiro,
	altura,
	ativo,
	data_nascimento,
	hora_aula,
	matriculado_em
) 
VALUES (
	'Diogo',
	'12345678901',
	'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam ac nunc sollicitudin, mollis justo non, feugiat magna. Etiam quis mi quis dui mattis suscipit. Maecenas fringilla nisi blandit sem commodo, rutrum malesuada odio fermentum. Suspendisse vel pulvinar sem. Nunc dapibus est ligula, vitae accumsan quam porttitor in. Phasellus ultrices nulla quam, sit amet ullamcorper nibh hendrerit vitae. Nunc venenatis dignissim imperdiet. Proin et turpis posuere, sodales arcu in, vulputate velit. Fusce lacinia purus dui, et molestie justo pellentesque vitae. Nunc sed augue varius, fringilla eros sit amet, iaculis nibh. Sed eu libero odio. Duis feugiat, tellus non molestie vehicula, lacus lorem auctor purus, id aliquam felis orci vitae ligula. Suspendisse elit neque, imperdiet non tincidunt fermentum, lobortis ut metus. Mauris nulla leo, imperdiet vel massa id, pulvinar varius nisi. Nam a varius velit, ac egestas sem.
	Integer luctus ante eget tristique dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vel sem ante. Phasellus fermentum mi non turpis molestie vulputate. Nulla erat lorem, convallis et libero id, fringilla sollicitudin leo. Cras ut tellus augue. Sed elit tellus, pellentesque non sagittis vel, mattis ut tortor. Sed tortor dui, pharetra quis urna at, tincidunt iaculis nulla. In ac auctor ante. Donec nisi augue, consequat a tempus in, mattis et mauris. Nulla facilisi. Cras aliquet massa eget velit convallis tempor. Vivamus id arcu sed ipsum semper tincidunt.',
	35,
	100.50,
	1.81,
	TRUE,
	'1984-08-27',
	'17:30:00',
	'2020-02-08 12:32:45'
);

UPDATE aluno SET
	nome = 'Nico', 
	cpf = '10987654321', 
	observacao = 'Teste',
	idade = 38,
	dinheiro = 15.23,
	altura = 1.90,
	ativo = FALSE,
	data_nascimento = '1980-01-15',
	hora_aula = '13:00:00',
	matriculado_em = '2020-01-02 15:00:00'
WHERE id = 1;

DELETE FROM aluno WHERE id = 2;

//AS ALIAS
SELECT nome AS "Nome do Aluno", cpf, altura, idade, matriculado_em as Data_Matricula FROM aluno;

//INSERÇÃO
INSERT INTO aluno (nome) VALUES ('Vinícius Dias');
INSERT INTO aluno (nome) VALUES ('João Roberto');
INSERT INTO aluno (nome) VALUES ('Jasmine Marllem');

//DIFERENTE
SELECT * FROM aluno WHERE nome != 'Jasmine Marllem';
SELECT * FROM aluno WHERE nome <> 'Jasmine Marllem';

SELECT * FROM aluno WHERE nome = 'Jasmine Marllem';

//LIKE
SELECT * FROM aluno WHERE nome LIKE '%m';
SELECT * FROM aluno WHERE nome NOT LIKE '%m';

//NULL E NOTNULL
SELECT * FROM aluno WHERE CPF ISNULL;
SELECT * FROM aluno WHERE CPF NOTNULL;

//PK, UNIQUE;

CREATE TABLE curso (
	id INTEGER NOT NULL UNIQUE,
	nome VARCHAR(255) NOT NULL	
);

CREATE TABLE curso (
	id INTEGER PRIMARY KEY,
	nome VARCHAR(255) NOT NULL	
);

INSERT INTO curso (id, nome) VALUES (1, 'HTML');
INSERT INTO curso (id, nome) VALUES (2, 'JAVASCRIPT');

DROP TABLE aluno_curso;

//FK
CREATE TABLE aluno_curso (
	aluno_id INTEGER,
	curso_id INTEGER,
	PRIMARY KEY (aluno_id, curso_id),
	
	FOREIGN KEY (aluno_id)
	REFERENCES aluno (id),
	
	FOREIGN KEY (curso_id)
	REFERENCES curso (id)
);

INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (1,1);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2,1);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (3,1);

//JUNTAR TABELAS NUMA CONSULTA

SELECT *
	FROM aluno
	JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
	JOIN curso       ON curso.id             = aluno_curso.curso_id;

SELECT aluno.nome as ALUNO, curso.nome as CURSO
	FROM aluno
	JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
	JOIN curso ON curso.id=aluno_curso.curso_id;

SELECT aluno.nome as ALUNO, curso.nome as CURSO
	FROM aluno
	LEFT JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
	LEFT JOIN curso ON curso.id=aluno_curso.curso_id;
	
SELECT aluno.nome as ALUNO, curso.nome as CURSO
	FROM aluno
	RIGHT JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
	RIGHT JOIN curso ON curso.id=aluno_curso.curso_id;
	
SELECT aluno.nome as ALUNO, curso.nome as CURSO
	FROM aluno
	FULL JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
	FULL JOIN curso ON curso.id=aluno_curso.curso_id;
	
SELECT aluno.nome as ALUNO, curso.nome as CURSO
	FROM aluno
	CROSS JOIN curso;

//DELETAR DA TABELA aluno gera um erro, pois por padrão haverá uma restrição deleção em cascade;

CREATE TABLE aluno_curso (
	aluno_id INTEGER,
	curso_id INTEGER,
	PRIMARY KEY (aluno_id, curso_id),
	
	FOREIGN KEY (aluno_id)
	REFERENCES aluno (id)
	ON DELETE CASCADE, //<<<<<<<<<<<<<<
	
	FOREIGN KEY (curso_id)
	REFERENCES curso (id)
);

//Atualização em cascata
CREATE TABLE aluno_curso (
	aluno_id INTEGER,
	curso_id INTEGER,
	PRIMARY KEY (aluno_id, curso_id),
	
	FOREIGN KEY (aluno_id)
	REFERENCES aluno (id)
	ON DELETE CASCADE
	ON UPDATE CASCADE, //<<<<<<<<<<<< 
	
	FOREIGN KEY (curso_id)
	REFERENCES curso (id)
);

//ORDENANDO CONSULTAS
SELECT * FROM funcionarios ORDER BY nome, matricula;

SELECT * FROM funcionarios ORDER BY 3, 4, 2; // os nº referem-se as colunas

//LIMITAÇÃO DE CONSULTA
SELECT * FROM funcionarios LIMIT 10;

SELECT * FROM funcionarios ORDER BY id LIMIT 5 OFFSET 1; //offset pula o registro 1 nesse caso.

// FUNÇÕES DE AGREGAÇÃO
COUNT(); AVG(); SUM(); MAX(); MIN();







